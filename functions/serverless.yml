service: movies-telegram-bot

plugins:
  - serverless-esbuild
  - serverless-content-encoding
  - serverless-offline

custom:
  cacheTable: cache-${opt:stage}
  playerUrl: 'https://movies-player.web.app#/watch'
  mongoUrl: 'mongodb+srv://lambda:${ssm:MONGODB_PASSWORD}@moviescachecluster-mex1w.mongodb.net/test'
  analyticsTable: analyticsTable-${opt:stage}
  contentEncoding:
    minimumCompressionSize: 4096
  serverless-offline:
    httpPort: 4000
    host: 0.0.0.0
  esbuild:
    watch:
      pattern: ['src/**/*.ts'] # match only typescript files in src directory
      ignore: ['.serverless/**/*', '.build', 'node_modules']
    sourcemap: linked
    keepNames: true

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-north-1
  versionFunctions: false
  environment:
    DEBUG: '*'
    ANALYTIC_TABLE: ${self:custom.analyticsTable}
    CACHE_TABLE: ${self:custom.cacheTable}
    MONGODB_URI: ${self:custom.mongoUrl}
    ANALYTIC_RETENTION: 90
    ANALYTIC_TIMEZONE: 'Europe/Kiev'
    STAGE: ${opt:stage}
    CACHE_TTL: 3600
    PLAYER_URL: ${self:custom.playerUrl}
    PROXY_URL: ${ssm:proxy_url}
    ALLOWED_DOMAINS: ''
    # ALLOWED_DOMAINS: 'localhost:3000,localhost:4000,movie-player.surge.sh,movies-player.firebaseapp.com,movies-player.web.app'
    ACCOUNT_ID: ${aws:accountId}
    REGION: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:BatchWriteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.analyticsTable}"
        - Effect: Allow
          Action:
            - logs:PutLogEvents
            - logs:DescribeLogStreams
          Resource: "arn:aws:logs:${self:provider.region}:*:log-group:web-${opt:stage}:log-stream:*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "arn:aws:lambda:${self:provider.region}:*:function:cloudflare-bypass-prod-proxy"

functions:
  search:
    handler: src/handlers/search.handler
    timeout: 15
    events:
      - http: 
          path: api/trackers/{provider}/search
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                q: true

  source:
    handler: src/handlers/source.handler
    events:
      - http: 
          path: api/trackers/{provider}/items/{resultId}/source/{sourceId}
          method: get
          cors: true

  info:
    handler: src/handlers/info.handler
    timeout: 30
    events:
      - http: 
          path: api/trackers/{provider}/items/{resultId}
          method: get
          cors: true

  extract:
    handler: src/handlers/extract.handler
    events:
      - http: 
          path: api/extract
          method: get
          cors: true

  bot:
    handler: src/handlers/bot.handler
    timeout: 15
    events:
      - http: 
          path: bot
          method: any
          cors: true
    environment:
      PROVIDERS: 'uakinoclub,uafilmtv,eneyida,rezka,videocdn,gidonline,kinogo'
      BOT_TYPE: 'films'
      TOKEN: ${ssm:bot_ru_TOKEN_prod}

  animebot:
    handler: src/handlers/bot.handler
    timeout: 15
    events:
      - http: 
          path: bot/anime
          method: any
          cors: true
    environment:
      PROVIDERS: 'anitubeua,animego,animeuaclub'
      BOT_HOOK_PATH: '/bot/anime'
      BOT_TYPE: 'anime'
      TOKEN: ${ssm:bot_anime_TOKEN_prod}
  
  uabot:
    handler: src/handlers/bot.handler
    timeout: 15
    events:
      - http: 
          path: bot/ua
          method: any
          cors: true
    environment:
      PROVIDERS: 'uafilmtv,uakinoclub,eneyida,uaserials,anitubeua'
      BOT_HOOK_PATH: '/bot/ua'
      BOT_TYPE: 'ua'
      LOCALIZATION_TYPE: 'localization'
      TOKEN: ${ssm:bot_ua_TOKEN_prod}
  
  logger:
    handler: src/handlers/logger.handler
    events:
      - http: 
          path: api/log
          method: post
          cors: true
    environment:
      LOG_GROUP: web-${opt:stage}

package:
  excludeDevDependencies: true
  patterns:
    - 'localization/**'

resources:
  Resources:
    analyticsTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.analyticsTable}
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: "N"
          - AttributeName: date
            AttributeType: S
          - AttributeName: month
            AttributeType: S
          - AttributeName: time
            AttributeType: "N"
        KeySchema:
          - AttributeName: date
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userIdx
            KeySchema:
              - AttributeName: uid
                KeyType: HASH
              - AttributeName: time
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: monthIdx
            KeySchema:
              - AttributeName: month
                KeyType: HASH
              - AttributeName: time
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true