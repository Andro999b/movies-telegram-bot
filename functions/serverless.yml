service: movies-telegram-bot

custom:
  tableName: cache-${opt:stage, 'dev'}
  playerUrl: 'http://movie-player.surge.sh/watch.html'
  mongoUrl: 'mongodb+srv://lambda:${ssm:MONGODB_PASSWORD}@moviescachecluster-mex1w.mongodb.net/test'
  helpImages: 'https://movie-player.surge.sh/images/help/1.png,https://movie-player.surge.sh/images/help/2.png,https://movie-player.surge.sh/images/help/3.png'

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  versionFunctions: false
  memorySize: 512

functions:
  library:
    handler: handlers/library.handler
    events:
      - http: 
          path: api/library
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                q: true
                type: true

  search:
    handler: handlers/search.handler
    events:
      - http: 
          path: api/trackers/{provider}/search
          method: get
          cors: true
          request:
            parameters:
              path:
                provider: true
              querystrings:
                q: true

  source:
    handler: handlers/source.handler
    events:
      - http: 
          path: api/trackers/{provider}/items/{resultId}/source/{sourceId}
          method: get
          cors: true
          request:
            parameters:
              path:
                - provider: true 
                - resultId: true 
                - sourceId: true 

  provider:
    handler: handlers/provider.handler
    events:
      - http: 
          path: api/trackers
          method: get
          cors: true

  info:
    handler: handlers/info.handler
    timeout: 12
    events:
      - http: 
          path: api/trackers/{provider}/items/{resultId}
          method: get
          cors: true
          request:
            parameters:
              path:
                - provider: true 
                - resultId: true 
    environment:
      TABLE_NAME: ${self:custom.tableName}
      MONGODB_URI: ${self:custom.mongoUrl}

  extract:
    handler: handlers/extract.handler
    events:
      - http: 
          path: api/extract
          method: get
          cors: true

  bot:
    handler: handlers/bot.handler
    events:
      - http: 
          path: bot
          method: any
          cors: true
    environment:
      BOT_TYPE: 'films'
      TOKEN: ${ssm:bot_ru_TOKEN_${opt:stage, 'dev'}}
      MIXPANEL_TOKEN: ${ssm:MIXPANEL_TOKEN}
      TABLE_NAME: ${self:custom.tableName}
      MONGODB_URI: ${self:custom.mongoUrl}
      PLAYER_URL: ${self:custom.playerUrl}
      HELP_IMAGES: ${self:custom.helpImages}
      PROVIDERS: 'videocdn,kinogo,kinovod,seasonvar,7serealov'

  animebot:
    handler: handlers/bot.handler
    events:
      - http: 
          path: bot/anime
          method: any
          cors: true
    environment:
      BOT_TYPE: 'anime'
      LOCALIZATION_TYPE: 'localization/anime'
      TOKEN: ${ssm:bot_anime_TOKEN_${opt:stage, 'dev'}}
      MIXPANEL_TOKEN: ${ssm:MIXPANEL_TOKEN}
      TABLE_NAME: ${self:custom.tableName}
      MONGODB_URI: ${self:custom.mongoUrl}
      PLAYER_URL: ${self:custom.playerUrl}
      HELP_IMAGES: ${self:custom.helpImages}
      PROVIDERS: 'anidub,animevost,animedia,nekomori'
  
  proxy:
    handler: handlers/proxy.handler
    events:
      - http: 
          path: proxy
          method: post
          cors: true

package:
  exclude:
   - test/**